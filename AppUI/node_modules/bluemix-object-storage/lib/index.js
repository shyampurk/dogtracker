'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ObjectStorage = function () {
  function ObjectStorage(userId, password, projectId, container) {
    var accessPoint = arguments.length <= 4 || arguments[4] === undefined ? 'https://dal.objectstorage.open.softlayer.com' : arguments[4];

    _classCallCheck(this, ObjectStorage);

    this.credentials = require('../config/credentials.json');
    this.userId = userId;
    this.password = password;
    this.projectId = projectId;
    this.container = container;
    this.endpoint = accessPoint + '/v1/AUTH_' + projectId;
    this.token = null;
    this.url = this.endpoint + '/' + this.container;
  }

  _createClass(ObjectStorage, [{
    key: 'createContainer',
    value: function createContainer() {
      var url = this.url;
      var method = 'put';
      var headers = { 'x-auth-token': this.token };
      return (0, _request2.default)({ url: url, method: method, headers: headers, json: true }, this).then(function () {
        return null;
      });
    }
  }, {
    key: 'listContainerFiles',
    value: function listContainerFiles() {
      var _this = this;

      var url = this.url;
      var method = 'get';
      var headers = { 'x-auth-token': this.token };
      return (0, _request2.default)({ url: url, method: method, headers: headers, json: true }, this).then(function (_ref) {
        var response = _ref.response;
        var body = _ref.body;

        return typeof body === 'string' ? [] : body.map(function (file) {
          return _this.url + '/' + file.name;
        });
      });
    }
  }, {
    key: 'setContainerPublicReadable',
    value: function setContainerPublicReadable() {
      var url = this.url;
      var method = 'post';
      var headers = { 'x-auth-token': this.token, 'x-container-read': '.r:*, .rlistings' };
      return (0, _request2.default)({ url: url, method: method, headers: headers, json: true }, this).then(function () {
        return null;
      });
    }
  }, {
    key: 'uploadFileToContainer',
    value: function uploadFileToContainer(filename, mimetype, buffer, size) {
      var _this2 = this;

      var url = this.url + '/' + filename;
      var method = 'put';
      var headers = { 'x-auth-token': this.token, 'content_type': mimetype, 'content-length': size };
      return (0, _request2.default)({ url: url, method: method, headers: headers, body: buffer }, this).then(function () {
        return _this2.url + '/' + filename;
      });
    }
  }]);

  return ObjectStorage;
}();

module.exports = ObjectStorage;